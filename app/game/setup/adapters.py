import importlib
import pkgutil
from abc import ABCMeta

from app.autogenerated import adapters
from app.core.command import ICommand
from app.core.ioc import IoC
from app.game.uobject import UObject


def ioc_setup_adapters() -> None:
    adapter_dict = _compile_adapter_dict()

    def make_adapter(interface: ABCMeta, uobj: UObject) -> object:
        return adapter_dict[interface](uobj)

    IoC[ICommand].resolve("IoC.Scope.Register", "Adapter", make_adapter).execute()


def _compile_adapter_dict() -> dict[ABCMeta, type]:
    """
    Creates dict[InterfaceType, AdapterType]
    Dynamically looks for adapters in all submodules of app.autogenerated.adapters
    """
    adapter_dict: dict[ABCMeta, type] = {}
    for module_info in pkgutil.iter_modules(adapters.__path__):
        module = importlib.import_module("." + module_info.name, adapters.__package__)
        adapter: type = next(
            type_ for name, type_ in module.__dict__.items() if name.endswith("Adapter")
        )
        interface = adapter.__bases__[0]
        adapter_dict[interface] = adapter
    return adapter_dict
