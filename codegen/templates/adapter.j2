from typing import override

{% for imp_module, imp_name in imports %}
from {{ imp_module }} import {{ imp_name }}
{% endfor %}


class {{ class_name }}({{ interface }}):
    def __init__(self, uobject: UObject) -> None:
        self._uobject = uobject

    {% for property in get_properties %}
    @override
    def get_{{ property.name }}(self) -> {{ property.type }}:
        return IoC[{{ property.type }}].resolve(
            "{{ interface }}.{{ property.name }}.Get",
            self._uobject,
        )

    {% endfor %}

    {% for property in set_properties %}
    @override
    def set_{{ property.name }}(self, value: {{ property.type }}) -> None:
        IoC[ICommand].resolve(
            "{{ interface }}.{{ property.name }}.Set",
            self._uobject,
            value,
        ).execute()

    {% endfor %}

    {% for method in methods %}
    @override
    def {{ method.name }}(
        self,
        {% for arg in method.args %}
        {{ arg.name }}: {{ arg.type }},
        {% endfor %}
    ) -> {{ method.return_type }}:
        {% if method.return_type == "None" %}
        IoC[ICommand].resolve(
            "{{ interface }}.{{ method.name }}",
            self._uobject,
            {% for arg in method.args %}
            {{ arg.name }},
            {% endfor %}
        ).execute()
        {% else %}
        return IoC[{{ method.return_type }}].resolve(
            "{{ interface }}.{{ method.name }}",
            self._uobject,
            {% for arg in method.args %}
            {{ arg.name }},
            {% endfor %}
        )
        {% endif %}

    {% endfor %}

